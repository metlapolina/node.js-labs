1. Дайте определение понятию «Интернет».
	сеть Интернет: 1) сеть на основе стека протоколов TCP/IP; 
	2) набор служб Интернет (DNS, SMTP/POP3/IMAP, WWW, FTP, Telnet, SSH,…); 
	3) организации, управляющие сетью Internet (ISOC, IETF, ICANN, IANA, IAB, …)

2. Дайте определение понятию «Служба Интернет».
	Служба Интернет - подразумевает наличие сервера и протокола для доступа 
к нему.

3. Дайте определение понятию «Узел сети Интернет».
	Узел сети Интернет - устройство, имеющее IP-адрес и подключенное к сети 
Интернет (обычно к сети Интернет-провайдера). Каждый узел характеризуется своей 
программно-аппаратной платформой – аппаратурой и операционной системой.

4. Дайте определение понятию «клиент-серверное приложение». 
	Клиент-серверное приложение = приложение с клиент-серверной архитектурой: 
приложение, состоящее из двух компонент – клиента и сервера; клиент и сервер 
взаимодействуют между собой в соответствии с заданными правилами (спецификациями, 
протоколами); для взаимодействия между клиентом и сервером в соответствии с 
правилами (спецификацией, протоколом) должно быть установлено соединение; 
инициатором соединения всегда является клиент.

5. Дайте определение понятию «сетевой протокол». 
	Сетевой протокол - это набор правил, позволяющий осуществлять соединение 
и обмен данными между двумя и более включёнными в сеть компьютерами.

6. Перечислите основные свойства протокола HTTP.
	-HTTP - это асимметричный протокол клиент-сервер запроса-ответа.
HTTP - это протокол извлечения,клиент извлекает информацию с сервера
(вместо того, чтобы сервер отправляет информацию клиенту).
	- HTTP - это протокол без сохранения состояния. 
Текущий запрос не знает, что было сделано в предыдущих запросах.

7. Перечислите состав информации, пересылаемой в HTTP-запросе. 
	1. строка запроса (Request Line)
	2. заголовки (Message Headers)
	Пустая строка (разделитель)
	3. тело сообщения (Entity Body) – необязательный параметр

8. Перечислите состав информации, пересылаемой в HTTP-ответе.  
	1. строка состояния
	2. заголовки (Message Headers)
	Пустая строка (разделитель)
	3. тело сообщения (Entity Body) – необязательный параметр

9. Дайте определение понятию «web-приложение». 
	Клиент-серверное приложение, у которого клиент и сервер взаимодействуют 
по протоколу HTTP называется web-приложением.

10. Дайте определение понятиям  «frontend» и «backend». 
	frontend - клиентская сторона клиент-серверного приложения.
backend - серверная сторона.

11. Дайте определение понятию «кроссплатформенное приложение». 
	кроссплатформенное приложение: приложение, способное работать на более 
чем одной программно-аппаратной (аппаратура + операционная система) платформе.  
Кроссплатформенность может быть достигнута различными способами: 1) на уровне 
компилятора (С, С++); 2) на уровне среды (фреймворка) исполнения (Java/JVM, 
C#/.NET CORE, JS/Node.js/V8).

12. Изобразите и поясните общую схему web-приложения.

13. Назовите основные технологии разработки серверных кроссплатформенных приложений.
	- PHP/Apache, LAMP;
- Java/JVM/Application Server;
- C#/ASP.NET CORE;
- Python/Django;
- Ruby on Rails;
- JS/Node.js, ….

14. Поясните понятие «асинхронная операция».
	Операция называется асинхронной, если ее выполнение  осуществляется 
в 2 фазы: 1) заявка на исполнение; 2) получение результата; при этом участвуют 
два механизма: A-механизм, формирующий заявку и потом  получающий результат; 
B-механизм, получающий заявку от A, исполняющий операцию и отправляющий результат 
A; продолжительность исполнения операции B-механизмом, как правило, непредсказуемо;
в то время пока B-механизм исполняет операцию, А-механизм выполняет собственную 
работу. Применение асинхронности не противоречит применению многопоточности.

15. Поясните принцип выполнения асинхронного запроса с помощью объекта 
XMLHTTPRequest и Fetch.
	Объект XMLHttpRequest (или, как его кратко называют, «XHR») даёт возможность из 
JavaScript делать HTTP-запросы к серверу без перезагрузки страницы. XMLHttpRequest
может работать с любыми данными, а не только с XML.
// 1. Создаём новый объект XMLHttpRequest
var xhr = new XMLHttpRequest();
// 2. Конфигурируем его: GET-запрос на URL 'phones.json'
xhr.open('GET', 'phones.json', false);//синхронный
// 3. Отсылаем запрос
xhr.send();
// 4. Если код ответа сервера не 200, то это ошибка
if (xhr.status != 200) { // обработать ошибку
} else {  // вывести результат}
	Запрос с помощью fetch возвращает Promise (обещание — которое будет 
выполнено или отклонено). Для того чтобы получить данные из промиса, нам нужно 
включить в цепочку два колбека с помощью метода then.
	-Делаем запрос, получаем промис.
	-После того как промис выполнен успешно, получаем специальный объект ответа.
Выполним метод объекта ответа json(), чтобы получить данные.
	-Метод json() возвращает промис, так что далее снова вызываем then и в 
колбеке выводим данные в консоль.
fetch('https://jsonplaceholder.typicode.com/posts/1')
  .then(response => response.json())
  .then(data => console.log(data));

16. Поясните основное назначение сервера NODE.JS.
	для разработки  серверных web-приложений на языке JS/V8

17. Перечислите основные свойства сервера NODE.JS.
-основан на Chrome V8;
-среда (контейнер) исполнения приложений на JavaScript;
-поддерживает механизм асинхронности;
-ориентирован на события;
-однопоточный (код приложения исполняется только в одном потоке, один стек 
вызовов); обычно в серверах для каждого соединения создается свой поток, 
в Node.js все соединения обрабатываются в одном JS-потоке;
-не блокирует выполнение кода при вводе/выводе (в файловой системе до 4х одновременно);
-в состав Node.js входят инструменты: npm – пакетный менеджер; gyp - Python-
генератор проектов; gtest – Google фреймворк для тестирования С++ приложений;   
-использует библиотеки: V8 – библиотека V8 Engine, libuv – библиотека для 
абстрагирования неблокирующих операций ввода/вывода;  http-parser – легковесный 
парсер http-сообщений (написан на C и не выполняет никаких системных вызовов);   
c-ares  - библиотека для работы с DNS;OpenSSL – библиотека для криптографии;  
zlib – сжатие и распаковка.
-разработчик: Райан Дал
